// src/network/Api.js
import { METHOD_TYPE } from "./methodType";
import axiosClient from "./axiosClient"; // Gi·∫£ ƒë·ªãnh axiosClient c√≥ baseURL v√† tr·∫£ v·ªÅ response.data
import qs from "qs";
import apiLogger from "../utils/apiLogger";

/**
 * H√†m g·ªçi API chung - H·ªó tr·ª£ ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ HTTP methods v·ªõi data body.
 * @param {object} params - Tham s·ªë cho request.
 * @param {string} params.endpoint - Endpoint c·ªßa API (v√≠ d·ª•: 'users/search', 'auth/login').
 * @param {string} [params.method=METHOD_TYPE.GET] - Ph∆∞∆°ng th·ª©c HTTP (GET, POST, PUT, DELETE, PATCH). * @param {object} [params.data] - Body data cho request (h·ªó tr·ª£ cho T·∫§T C·∫¢ methods, k·ªÉ c·∫£ GET cho custom APIs).
 *                                 - POST/PUT/PATCH: D·ªØ li·ªáu form ho·∫∑c JSON
 *                                 - GET: D·ªØ li·ªáu g·ª≠i qua body (cho custom APIs c√≤n l·∫°i)
 *                                 - DELETE: D·ªØ li·ªáu x√≥a n·∫øu backend y√™u c·∫ßu
 *                                 - NOTE: meeting/get-meeting ƒë√£ chuy·ªÉn th√†nh POST
 * @param {object} [params.query] - Query parameters. S·∫Ω ƒë∆∞·ª£c n·ªëi v√†o URL.
 *                                  ƒê·ªëi v·ªõi GET, axios t·ª± x·ª≠ l√Ω params.
 *                                  ƒê·ªëi v·ªõi c√°c method kh√°c, qs.stringify s·∫Ω ƒë∆∞·ª£c d√πng.
 *                                  L∆∞u √Ω: `filter` v√† `sort` trong `query` n√™n ƒë∆∞·ª£c JSON.stringify t·ª´ component g·ªçi n·∫øu backend y√™u c·∫ßu d·∫°ng chu·ªói JSON.
 * @param {boolean} [params.sendCredentials=false] - C√≥ g·ª≠i k√®m credentials (cookies) hay kh√¥ng.
 * @param {boolean} [params.requireToken=false] - C√≥ y√™u c·∫ßu token authentication hay kh√¥ng.
 * @returns {Promise<any>} - Tr·∫£ v·ªÅ data t·ª´ response c·ªßa API (ƒë√£ qua interceptor c·ªßa axiosClient).
 * @throws {Error} - N√©m l·ªói n·∫øu API call th·∫•t b·∫°i (ƒë√£ qua interceptor c·ªßa axiosClient).
 */
const Api = async ({
  endpoint,
  method = METHOD_TYPE.GET,
  data, // Body data cho T·∫§T C·∫¢ methods (POST, PUT, PATCH, DELETE, v√† c·∫£ GET cho custom APIs)
  query, // Query params cho GET ho·∫∑c c√°c method kh√°c n·∫øu backend h·ªó tr·ª£
  sendCredentials = false,
  requireToken = false, // Th√™m tham s·ªë requireToken
}) => {
  // processedQuery s·∫Ω ch·ª©a c√°c tham s·ªë ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã s·∫µn t·ª´ component g·ªçi
  // v√≠ d·ª•: filter v√† sort ƒë√£ ƒë∆∞·ª£c JSON.stringify n·∫øu c·∫ßn
  let processedQuery = { ...query };

  let requestUrl = endpoint; // axiosClient s·∫Ω t·ª± n·ªëi baseURL
  const config = {
    headers: {}, // axiosClient s·∫Ω th√™m Authorization header n·∫øu c√≥ t·ª´ interceptor
    ...(sendCredentials && { withCredentials: true }),
  };

  // Th√™m header ƒë·ªÉ b√°o cho axiosClient bi·∫øt request n√†y c·∫ßn token
  if (requireToken) {
    config.headers["X-Require-Token"] = "true";
  }

  const upperCaseMethod = method.toUpperCase(); // X·ª≠ l√Ω query parameters
  if (Object.keys(processedQuery).length > 0) {
    if (upperCaseMethod === METHOD_TYPE.GET) {
      // ƒê·ªëi v·ªõi GET, axios s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω params v√† encoding
      config.params = processedQuery;
      // Kh√¥ng c·∫ßn qs.stringify cho GET khi d√πng config.params c·ªßa Axios
    } else {
      // ƒê·ªëi v·ªõi c√°c method kh√°c (POST, PUT, DELETE, PATCH), n·∫øu c√≥ query params,
      // ch√∫ng ta s·∫Ω n·ªëi ch√∫ng v√†o URL.
      // qs.stringify s·∫Ω convert object th√†nh query string.
      // encodeValuesOnly: true ƒë·∫£m b·∫£o ch·ªâ gi√° tr·ªã ƒë∆∞·ª£c encode.
      // arrayFormat: 'brackets' l√† m·ªôt l·ª±a ch·ªçn ph·ªï bi·∫øn (v√≠ d·ª•: key[]=value1&key[]=value2)
      // b·∫°n c√≥ th·ªÉ thay ƒë·ªïi arrayFormat t√πy theo y√™u c·∫ßu c·ªßa backend ('repeat', 'indices', 'comma')
      const queryString = qs.stringify(processedQuery, {
        encodeValuesOnly: true,
        arrayFormat: "brackets", // Ho·∫∑c 'repeat', 'indices', 'comma'
      });
      if (queryString) {
        requestUrl = `${endpoint}?${queryString}`;
      }
    }
  }
  // === ENHANCED API LOGGING ===
  const requestId = apiLogger.logRequest(
    upperCaseMethod,
    `${axiosClient.defaults.baseURL}${requestUrl}`,
    data,
    processedQuery
  );

  try {
    let result;
    // S·∫Ω nh·∫≠n tr·ª±c ti·∫øp `data` t·ª´ `axiosClient` (do axiosClient ƒë√£ tr·∫£ v·ªÅ response.data)
    switch (upperCaseMethod) {
      case METHOD_TYPE.POST:
        result = await axiosClient.post(requestUrl, data, config);
        break;
      case METHOD_TYPE.PUT:
        result = await axiosClient.put(requestUrl, data, config);
        break;
      case METHOD_TYPE.DELETE:
        // DELETE request th∆∞·ªùng kh√¥ng c√≥ body (data), nh∆∞ng axios cho ph√©p truy·ªÅn config.data
        // N·∫øu API c·ªßa b·∫°n kh√¥ng c·∫ßn body cho DELETE, c√≥ th·ªÉ ch·ªâ truy·ªÅn requestUrl v√† config (b·ªè {data} trong ...config)
        // Tuy nhi√™n, ƒë·ªÉ nh·∫•t qu√°n, vi·ªác truy·ªÅn { ...config, data } l√† an to√†n, axios s·∫Ω x·ª≠ l√Ω.
        // M·ªôt s·ªë server c√≥ th·ªÉ ƒë·ªçc body c·ªßa DELETE request.
        result = await axiosClient.delete(requestUrl, {
          ...config,
          data,
        });
        break;
      case METHOD_TYPE.PATCH:
        result = await axiosClient.patch(requestUrl, data, config);
        break;
      case METHOD_TYPE.GET:
      default:
        // Enhanced GET handling - Supports both standard GET and custom GET with body data
        if (data && Object.keys(data).length > 0) {
          console.log("üîç DEBUG - GET with body data:", {
            endpoint: requestUrl,
            data: data,
            dataKeys: Object.keys(data),
            dataType: typeof data,
            dataAsJSON: JSON.stringify(data),
          });

          // Use axios.request() for GET with body data (explicit and consistent)
          // This matches Postman behavior for custom APIs that accept GET with body
          result = await axiosClient.request({
            method: "GET",
            url: requestUrl,
            data: data, // Body data for custom APIs (remaining GET with body APIs)
            ...config,
          });

          console.log("‚úÖ DEBUG - GET with body request sent successfully");
        } else {
          console.log("üîç DEBUG - Standard GET without body data");
          // Standard GET request without body
          result = await axiosClient.get(requestUrl, config);
        }
        break;
    } // === SUCCESS RESPONSE ===
    apiLogger.logResponse(result, requestId);

    return result;
  } catch (error) {
    // === ERROR RESPONSE ===
    // Pass the full error object to get complete error details
    apiLogger.logError(error, requestUrl, requestId);

    throw error;
  }
};

export default Api;
