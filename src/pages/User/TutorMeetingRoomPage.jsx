// src/pages/User/TutorMeetingRoomPage.jsx
import { useState, useEffect, memo } from "react";
import Api from "../../network/Api";
import { METHOD_TYPE } from "../../network/methodType";
import { useNavigate, useLocation } from "react-router-dom";
import ZoomMeetingEmbed from "../../components/User/Zoom/ZoomMeetingEmbed"; // Re-enabled after fixing critical import issue
import ZoomDebugComponent from "../../components/User/Zoom/ZoomDebugComponent"; // Keep for debugging
import "../../assets/css/TutorMeetingRoomPage.style.css";

const TutorMeetingRoomPage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [isZoomConnected, setIsZoomConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [meetingData, setMeetingData] = useState(null);
  const [classroomInfo, setClassroomInfo] = useState(null);
  const [zoomSignature, setZoomSignature] = useState(null);
  const [zoomSdkKey, setZoomSdkKey] = useState(null);
  const [userRole, setUserRole] = useState("host"); // Default to host for tutor
  const [useDebugComponent, setUseDebugComponent] = useState(true); // Toggle between debug and production component
  useEffect(() => {
    console.log("üìç TutorMeetingRoomPage - Navigation state received:", {
      hasLocationState: !!location.state,
      hasMeetingData: !!(location.state && location.state.meetingData),
      hasZoomConnection: !!(
        location.state && location.state.needZoomConnection
      ),
      hasZoomAuthError: !!(location.state && location.state.zoomAuthError),
      userRole: location.state?.userRole,
      classroomName: location.state?.classroomName,
    });

    // Check if meeting data was passed from TutorClassroomPage
    if (location.state && location.state.meetingData) {
      console.log("‚úÖ Meeting data found:", location.state.meetingData);
      setMeetingData(location.state.meetingData);
      setClassroomInfo({
        name: location.state.classroomName,
        id: location.state.classroomId,
        isNewMeeting: location.state.isNewMeeting || false,
      });

      // Set user role based on navigation source
      if (location.state.userRole === "student") {
        console.log("üë®‚Äçüéì Setting role to participant (student)");
        setUserRole("participant");
      } else {
        console.log("üë®‚Äçüè´ Setting role to host (tutor)");
        setUserRole("host"); // Default for tutor
      }
    }

    // Check if redirected from classroom page for Zoom connection
    if (location.state && location.state.needZoomConnection) {
      console.log(
        "üîó Need Zoom connection for classroom:",
        location.state.classroomName
      );
      setClassroomInfo({
        name: location.state.classroomName,
        id: location.state.classroomId,
        needConnection: true,
      });
    }

    // Ki·ªÉm tra l·ªói ƒë∆∞·ª£c truy·ªÅn t·ª´ ZoomCallback
    if (location.state && location.state.zoomAuthError) {
      console.log("‚ùå Zoom auth error received:", location.state.zoomAuthError);
      setError(location.state.zoomAuthError);
      // X√≥a state ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã l·∫°i khi refresh ho·∫∑c ƒëi·ªÅu h∆∞·ªõng n·ªôi b·ªô
      navigate(location.pathname, { replace: true, state: {} });
    }

    const checkZoomConnection = async () => {
      setIsLoading(true);
      const zoomAccessToken = localStorage.getItem("zoomAccessToken");
      console.log("üîç Checking Zoom connection:", {
        hasToken: !!zoomAccessToken,
        tokenLength: zoomAccessToken?.length,
      });

      if (zoomAccessToken) {
        setIsZoomConnected(true);
        console.log("‚úÖ Zoom is connected");
      } else {
        setIsZoomConnected(false);
        console.log("‚ùå Zoom not connected");
      }
      setIsLoading(false);
    };
    checkZoomConnection();
  }, [location, navigate]); // Fetch Zoom signature when we have meeting data
  useEffect(() => {
    const fetchZoomSignature = async () => {
      if (!meetingData || !isZoomConnected) {
        console.log("üîç Skipping signature fetch:", {
          hasMeetingData: !!meetingData,
          isZoomConnected,
          userRole,
        });
        return;
      }

      try {
        console.log("üîë Fetching Zoom signature with params:", {
          meetingId: meetingData.zoomMeetingId,
          userRole,
          roleValue: userRole === "host" ? 1 : 0,
          zoomToken: !!localStorage.getItem("zoomAccessToken"),
        });

        // Determine role: 1 for host (tutor), 0 for participant (student)
        const roleValue = userRole === "host" ? 1 : 0;

        const response = await Api({
          endpoint: "meeting/signature",
          method: METHOD_TYPE.POST,
          data: {
            zoomMeetingId: meetingData.zoomMeetingId,
            role: roleValue,
          },
          requireToken: false, // axiosClient handles Zoom Bearer token
        });

        console.log("üì° Signature API response:", response);

        if (response.success && response.data) {
          setZoomSignature(response.data.signature);
          setZoomSdkKey(response.data.sdkKey);
          console.log("‚úÖ Zoom signature fetched successfully:", {
            hasSignature: !!response.data.signature,
            hasSdkKey: !!response.data.sdkKey,
          });
        } else {
          console.error("‚ùå Signature API failed:", response);
          throw new Error(response.message || "Failed to get Zoom signature");
        }
      } catch (error) {
        console.error("üö® Error fetching Zoom signature:", error);
        setError(
          `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë·ªÉ tham gia ph√≤ng h·ªçc: ${
            error.message || error
          }. Vui l√≤ng th·ª≠ l·∫°i.`
        );
      }
    };

    fetchZoomSignature();
  }, [meetingData, isZoomConnected, userRole]);

  const handleConnectZoom = async () => {
    setIsLoading(true);
    setError(null); // X√≥a l·ªói c≈© tr∆∞·ªõc khi th·ª≠ k·∫øt n·ªëi m·ªõi
    try {
      const backendResponse = await Api({
        // backendResponse l√† data t·ª´ axiosClient
        endpoint: "meeting/auth", // Endpoint kh√¥ng c√≥ / ·ªü ƒë·∫ßu
        method: METHOD_TYPE.GET,
      });
      if (
        backendResponse &&
        backendResponse.success &&
        backendResponse.data &&
        backendResponse.data.zoomAuthUrl
      ) {
        window.location.href = backendResponse.data.zoomAuthUrl;
      } else {
        const errMsg =
          backendResponse?.message || "Kh√¥ng th·ªÉ l·∫•y URL x√°c th·ª±c Zoom.";
        setError(errMsg);
        setIsLoading(false);
      }
    } catch (err) {
      const errMsg =
        err.response?.data?.message ||
        err.message ||
        "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.";
      setError(errMsg);
      setIsLoading(false);
    }
  };
  const handleCreateMeeting = () => {
    // Redirect back to classroom management page since create meeting functionality is now integrated there
    navigate("/tai-khoan/ho-so/quan-ly-lop-hoc");
  };

  if (isLoading) {
    return (
      <div className="loading-container">ƒêang t·∫£i th√¥ng tin ph√≤ng h·ªçp...</div>
    );
  }
  // If we have meeting data and signature, show the Zoom meeting embed
  if (meetingData && isZoomConnected && zoomSignature && zoomSdkKey) {
    return (
      <div className="tutor-meeting-room-page">
        <div className="meeting-header">
          <h2 className="page-title">
            {classroomInfo?.name || "Ph√≤ng h·ªçc Zoom"}
            {classroomInfo?.isNewMeeting && (
              <span className="new-meeting-badge">Ph√≤ng h·ªçc m·ªõi</span>
            )}
          </h2>{" "}
          <button
            onClick={() => {
              const redirectUrl =
                userRole === "host"
                  ? "/tai-khoan/ho-so/quan-ly-lop-hoc"
                  : "/tai-khoan/ho-so/lop-hoc-cua-toi";
              navigate(redirectUrl);
            }}
            className="btn btn-secondary btn-back"
          >
            <i className="fas fa-arrow-left" style={{ marginRight: "8px" }}></i>
            {userRole === "host"
              ? "Quay l·∫°i qu·∫£n l√Ω l·ªõp h·ªçc"
              : "Quay l·∫°i l·ªõp h·ªçc c·ªßa t√¥i"}
          </button>{" "}
        </div>{" "}
        {/* Component Toggle */}
        <div
          style={{
            marginBottom: "15px",
            padding: "10px",
            backgroundColor: "#f8f9fa",
            borderRadius: "5px",
            border: "1px solid #dee2e6",
          }}
        >
          <label style={{ marginRight: "10px", fontWeight: "bold" }}>
            Ch·ªçn component Zoom:
          </label>
          <button
            onClick={() => setUseDebugComponent(true)}
            style={{
              marginRight: "10px",
              padding: "5px 15px",
              backgroundColor: useDebugComponent ? "#007bff" : "#6c757d",
              color: "white",
              border: "none",
              borderRadius: "3px",
              cursor: "pointer",
            }}
          >
            Debug Component {useDebugComponent ? "‚úì" : ""}
          </button>
          <button
            onClick={() => setUseDebugComponent(false)}
            style={{
              padding: "5px 15px",
              backgroundColor: !useDebugComponent ? "#28a745" : "#6c757d",
              color: "white",
              border: "none",
              borderRadius: "3px",
              cursor: "pointer",
            }}
          >
            Production Component {!useDebugComponent ? "‚úì" : ""}
          </button>
          <small
            style={{ display: "block", marginTop: "5px", color: "#6c757d" }}
          >
            Debug: Th√¥ng tin chi ti·∫øt v·ªÅ SDK loading | Production: Component
            ch√≠nh ƒë√£ ƒë∆∞·ª£c s·ª≠a
          </small>
        </div>
        {/* Conditional Zoom Component Rendering */}
        {useDebugComponent ? (
          <ZoomDebugComponent
            sdkKey={zoomSdkKey}
            signature={zoomSignature}
            meetingNumber={meetingData.zoomMeetingId}
            userName={
              userRole === "host"
                ? `Gia s∆∞ - ${classroomInfo?.name || "Ph√≤ng h·ªçc"}`
                : `H·ªçc vi√™n - ${classroomInfo?.name || "Ph√≤ng h·ªçc"}`
            }
            passWord={meetingData.password}
            onError={(error) => {
              console.error("Zoom debug error:", error);
              setError(`Debug error: ${error}`);
            }}
          />
        ) : (
          <ZoomMeetingEmbed
            sdkKey={zoomSdkKey}
            signature={zoomSignature}
            meetingNumber={meetingData.zoomMeetingId}
            userName={
              userRole === "host"
                ? `Gia s∆∞ - ${classroomInfo?.name || "Ph√≤ng h·ªçc"}`
                : `H·ªçc vi√™n - ${classroomInfo?.name || "Ph√≤ng h·ªçc"}`
            }
            userEmail="test@example.com"
            passWord={meetingData.password}
            customLeaveUrl="/"
            onMeetingEnd={() => {
              console.log("Meeting ended");
              navigate("/tutor/classroom");
            }}
            onError={(error) => {
              console.error("Zoom production error:", error);
              setError(`Production error: ${error}`);
            }}
            onMeetingJoined={() => {
              console.log("Meeting joined successfully");
            }}
          />
        )}
        {/* 
        Note: Both components now available with toggle
        - ZoomDebugComponent: Comprehensive debugging and error reporting
        - ZoomMeetingEmbed: Fixed production component with dynamic SDK loading
        */}
      </div>
    );
  }
  // Show loading state if we have meeting data but no signature yet
  if (meetingData && isZoomConnected && (!zoomSignature || !zoomSdkKey)) {
    return (
      <div className="tutor-meeting-room-page">
        <div className="loading-container">
          <p>ƒêang chu·∫©n b·ªã ph√≤ng h·ªçc Zoom...</p>
          <div style={{ fontSize: "14px", color: "#666", marginTop: "10px" }}>
            <p>Meeting ID: {meetingData.zoomMeetingId}</p>
            <p>
              Role:{" "}
              {userRole === "host" ? "Gia s∆∞ (Host)" : "H·ªçc vi√™n (Participant)"}
            </p>
            <p>Signature: {zoomSignature ? "‚úÖ" : "‚è≥ ƒêang l·∫•y..."}</p>
            <p>SDK Key: {zoomSdkKey ? "‚úÖ" : "‚è≥ ƒêang l·∫•y..."}</p>
          </div>
          {error && (
            <div
              style={{
                color: "red",
                marginTop: "15px",
                padding: "10px",
                border: "1px solid red",
                borderRadius: "5px",
              }}
            >
              <strong>L·ªói:</strong> {error}
              <br />
              <button
                onClick={() => window.location.reload()}
                style={{ marginTop: "10px", padding: "5px 10px" }}
              >
                Th·ª≠ l·∫°i
              </button>
            </div>
          )}
        </div>
      </div>
    );
  }
  return (
    <div className="tutor-meeting-room-page">
      <h2 className="page-title">
        {classroomInfo?.needConnection
          ? `K·∫øt n·ªëi Zoom cho l·ªõp: ${classroomInfo.name}`
          : "Qu·∫£n L√Ω Ph√≤ng H·ªçp"}
      </h2>
      {error && <p className="error-message">{error}</p>}
      {!isZoomConnected ? (
        <div className="zoom-connect-section">
          {classroomInfo?.needConnection ? (
            <div className="classroom-connection-info">
              <div className="connection-notice">
                <i
                  className="fas fa-info-circle"
                  style={{ marginRight: "8px", color: "#007bff" }}
                ></i>
                <span>
                  B·∫°n c·∫ßn k·∫øt n·ªëi t√†i kho·∫£n Zoom ƒë·ªÉ t·∫°o ph√≤ng h·ªçc cho l·ªõp:{" "}
                  <strong>{classroomInfo.name}</strong>
                </span>
              </div>
              <p>
                Sau khi k·∫øt n·ªëi th√†nh c√¥ng, b·∫°n s·∫Ω ƒë∆∞·ª£c ƒë∆∞a v·ªÅ trang qu·∫£n l√Ω l·ªõp
                h·ªçc ƒë·ªÉ ti·∫øp t·ª•c t·∫°o ph√≤ng h·ªçc Zoom.
              </p>
            </div>
          ) : (
            <p>
              ƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng ph√≤ng h·ªçp tr·ª±c tuy·∫øn, b·∫°n c·∫ßn k·∫øt n·ªëi t√†i
              kho·∫£n Zoom c·ªßa m√¨nh.
            </p>
          )}
          <button
            onClick={handleConnectZoom}
            className="btn btn-primary btn-connect-zoom"
            disabled={isLoading}
          >
            <i className="fas fa-video" style={{ marginRight: "8px" }}></i>
            K·∫øt n·ªëi t√†i kho·∫£n Zoom
          </button>
        </div>
      ) : (
        <div className="zoom-connected-section">
          <div className="connection-status success">
            <i className="fas fa-check-circle"></i>
            <span>T√†i kho·∫£n Zoom c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi.</span>
          </div>
          <p className="info-text">
            Ch·ª©c nƒÉng t·∫°o ph√≤ng h·ªçc Zoom hi·ªán ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p v√†o trang qu·∫£n l√Ω
            l·ªõp h·ªçc. B·∫°n c√≥ th·ªÉ t·∫°o ph√≤ng h·ªçc tr·ª±c ti·∫øp t·ª´ m·ªói l·ªõp h·ªçc.
          </p>
          <button
            onClick={handleCreateMeeting}
            className="btn btn-primary btn-create-meeting"
          >
            <i
              className="fas fa-chalkboard-teacher"
              style={{ marginRight: "8px" }}
            ></i>
            ƒêi ƒë·∫øn qu·∫£n l√Ω l·ªõp h·ªçc
          </button>
        </div>
      )}
    </div>
  );
};
export default memo(TutorMeetingRoomPage);
