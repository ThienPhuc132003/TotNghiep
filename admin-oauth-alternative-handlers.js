// ADMIN MICROSOFT OAUTH - BACKEND REDIRECT FLOW
// File: admin-oauth-alternative-handlers.js

// Import dependencies
import Api from "../src/network/Api";
import { METHOD_TYPE } from "../src/network/methodType";
import { setAdminProfile } from "../src/redux/adminSlice";
import Cookies from "js-cookie";

// ==================================================
// LU·ªíNG TH·ª∞C T·∫æ: Backend x·ª≠ l√Ω to√†n b·ªô OAuth v√† redirect v·ªÅ frontend
// ==================================================

/**
 * Lu·ªìng ho·∫°t ƒë·ªông th·ª±c t·∫ø (theo backend implementation):
 * 1. Frontend: Call API /api/admin/auth/get-uri-microsoft ‚Üí l·∫•y OAuth URL
 * 2. Frontend: Redirect user ƒë·∫øn OAuth URL
 * 3. Microsoft: User ƒëƒÉng nh·∫≠p ‚Üí redirect v·ªÅ /api/admin/auth/callback?code=xxx
 * 4. Backend: X·ª≠ l√Ω callback t·ª± ƒë·ªông:
 *    - Exchange code v·ªõi Microsoft ƒë·ªÉ l·∫•y access token
 *    - L·∫•y user info t·ª´ Microsoft Graph API
 *    - T·∫°o JWT token cho app
 *    - Redirect v·ªÅ frontend: /admin/dashboard?token=xxx&admin=xxx
 * 5. Frontend: L·∫•y token t·ª´ URL params v√† l∆∞u authentication
 */

// ==================================================
// B∆Ø·ªöC 1: L·∫•y Microsoft OAuth URL t·ª´ backend
// ==================================================

export const getMicrosoftAuthUrl = async () => {
  try {
    const response = await Api({
      endpoint: "/api/admin/auth/get-uri-microsoft",
      method: METHOD_TYPE.GET,
    });

    if (response.success && response.data?.authUrl) {
      console.log("‚úÖ Got Microsoft OAuth URL from backend");
      return { success: true, authUrl: response.data.authUrl };
    }

    throw new Error("Invalid response from get-uri-microsoft API");
  } catch (err) {
    console.error("‚ùå Error getting Microsoft OAuth URL:", err);
    return { success: false, error: err.message };
  }
};

// ==================================================
// B∆Ø·ªöC 2: X·ª≠ l√Ω redirect t·ª´ backend sau khi OAuth th√†nh c√¥ng
// ==================================================

export const extractTokenFromRedirect = () => {
  // Backend redirect v·ªÅ frontend v·ªõi token trong URL:
  // /admin/dashboard?token=xxx&admin=xxx&state=xxx
  const urlParams = new URLSearchParams(window.location.search);
  const token = urlParams.get("token");
  const adminData = urlParams.get("admin");
  const state = urlParams.get("state");
  const error = urlParams.get("error");

  if (error) {
    console.error("‚ùå Microsoft OAuth error from backend:", error);
    return { success: false, error };
  }

  if (token) {
    console.log("‚úÖ Got token from backend redirect");
    let adminProfile = null;

    // Decode admin data n·∫øu c√≥
    if (adminData) {
      try {
        adminProfile = JSON.parse(decodeURIComponent(adminData));
        console.log("‚úÖ Decoded admin profile from redirect");
      } catch (err) {
        console.warn("‚ö†Ô∏è Could not decode admin data:", err);
      }
    }

    return { success: true, token, adminProfile, state };
  }

  return { success: false, error: "No token found in redirect URL" };
};

// ==================================================
// B∆Ø·ªöC 3: L∆∞u authentication data t·ª´ backend redirect
// ==================================================

export const saveAuthenticationFromRedirect = (
  token,
  adminProfile,
  dispatch,
  setIsAuthenticated
) => {
  try {
    // L∆∞u token v√†o cookies
    Cookies.set("token", token, {
      secure: true,
      sameSite: "Lax",
      expires: 7,
    });
    Cookies.set("role", "admin", {
      secure: true,
      sameSite: "Lax",
      expires: 7,
    });

    // L∆∞u admin profile n·∫øu c√≥
    if (adminProfile) {
      dispatch(setAdminProfile(adminProfile));
      setIsAuthenticated(true);
      console.log("‚úÖ Microsoft authentication complete with profile");
      return { success: true, hasProfile: true };
    } else {
      setIsAuthenticated(true);
      console.log(
        "‚úÖ Microsoft authentication complete, need to fetch profile"
      );
      return { success: true, hasProfile: false };
    }
  } catch (err) {
    console.error("‚ùå Error saving authentication:", err);
    return { success: false, error: err.message };
  }
};

// ==================================================
// UNIVERSAL HANDLER - X·ª≠ l√Ω to√†n b·ªô lu·ªìng Microsoft OAuth
// ==================================================

export const handleAdminMicrosoftAuth = async (
  dispatch,
  setIsAuthenticated,
  navigate
) => {
  try {
    // Ki·ªÉm tra xem c√≥ token trong URL kh√¥ng (t·ª´ backend redirect)
    const redirectResult = extractTokenFromRedirect();

    if (redirectResult.success && redirectResult.token) {
      // C√≥ token t·ª´ backend redirect, l∆∞u authentication
      console.log(
        "üîÑ Processing Microsoft authentication from backend redirect..."
      );

      const authResult = saveAuthenticationFromRedirect(
        redirectResult.token,
        redirectResult.adminProfile,
        dispatch,
        setIsAuthenticated
      );

      if (authResult.success) {
        // Clean URL sau khi l∆∞u authentication th√†nh c√¥ng
        navigate("/admin/dashboard", { replace: true });
        return {
          success: true,
          needsFetch: !authResult.hasProfile,
        };
      } else {
        return { success: false, error: authResult.error };
      }
    } else if (redirectResult.error) {
      // C√≥ error t·ª´ backend redirect
      return { success: false, error: redirectResult.error };
    } else {
      // Kh√¥ng c√≥ token, b·∫Øt ƒë·∫ßu lu·ªìng OAuth m·ªõi
      console.log("üîÑ Starting new Microsoft OAuth flow...");
      const urlResult = await getMicrosoftAuthUrl();

      if (urlResult.success) {
        // Redirect ƒë·∫øn Microsoft OAuth URL
        window.location.href = urlResult.authUrl;
        return { success: true, redirecting: true };
      } else {
        return { success: false, error: urlResult.error };
      }
    }
  } catch (error) {
    console.error("‚ùå Microsoft OAuth handler error:", error);
    return { success: false, error: error.message };
  }
};

// ==================================================
// HELPER FUNCTIONS (Deprecated - kh√¥ng c·∫ßn n·ªØa)
// ==================================================

// C√°c helper functions n√†y kh√¥ng c√≤n c·∫ßn thi·∫øt v√¨ backend ƒë√£ handle OAuth URL generation
export const generateRandomString = (length = 32) => {
  const characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let result = "";
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
};

// Deprecated: S·ª≠ d·ª•ng getMicrosoftAuthUrl() thay th·∫ø
export const createMicrosoftAuthUrl = (clientId, tenantId = "common") => {
  console.warn(
    "‚ö†Ô∏è createMicrosoftAuthUrl is deprecated. Use getMicrosoftAuthUrl() instead."
  );
  console.warn("‚ö†Ô∏è Parameters ignored:", { clientId, tenantId });
  return null;
};

// ==================================================
// BACKEND IMPLEMENTATION GUIDE
// ==================================================

/**
 * BACKEND API ENDPOINTS TH·ª∞C T·∫æ:
 *
 * 1. GET /api/admin/auth/get-uri-microsoft
 *    - M·ª•c ƒë√≠ch: L·∫•y Microsoft OAuth URL ƒë√£ config s·∫µn
 *    - Response: { success: true, data: { authUrl: "https://login.microsoftonline.com/..." } }
 *
 * 2. GET /api/admin/auth/callback?code=xxx&state=xxx (Backend x·ª≠ l√Ω t·ª± ƒë·ªông)
 *    - Microsoft redirect ƒë·∫øn URL n√†y v·ªõi authorization code
 *    - Backend t·ª± ƒë·ªông:
 *      + Exchange code v·ªõi Microsoft ƒë·ªÉ l·∫•y access token
 *      + L·∫•y user info t·ª´ Microsoft Graph API
 *      + T·∫°o JWT token cho app
 *      + Redirect v·ªÅ frontend: /admin/dashboard?token=xxx&admin=xxx
 *
 * 3. FRONTEND ch·ªâ c·∫ßn:
 *    - L·∫•y OAuth URL t·ª´ API 1 v√† redirect
 *    - Nh·∫≠n token t·ª´ URL params sau khi backend redirect v·ªÅ
 *    - L∆∞u token v√† authentication state
 */

// ==================================================
// USAGE EXAMPLES
// ==================================================

/**
 * 1. AdminLogin.jsx - Kh·ªüi t·∫°o ƒëƒÉng nh·∫≠p:
 *
 * import { getMicrosoftAuthUrl } from './admin-oauth-alternative-handlers';
 *
 * const handleMicrosoftLogin = async () => {
 *   const result = await getMicrosoftAuthUrl();
 *   if (result.success) {
 *     window.location.href = result.authUrl;
 *   } else {
 *     console.error('Failed to get OAuth URL:', result.error);
 *   }
 * };
 *
 *
 * 2. AdminDashboard.jsx - X·ª≠ l√Ω redirect t·ª´ backend:
 *
 * import { handleAdminMicrosoftAuth } from './admin-oauth-alternative-handlers';
 *
 * useEffect(() => {
 *   const searchParams = new URLSearchParams(location.search);
 *
 *   // Ki·ªÉm tra n·∫øu c√≥ token ho·∫∑c error t·ª´ backend redirect
 *   if (searchParams.has('token') || searchParams.has('error')) {
 *     handleAdminMicrosoftAuth(dispatch, setIsAuthenticated, navigate)
 *       .then(result => {
 *         if (result.success && result.needsFetch) {
 *           fetchAdminProfile(); // Fallback ƒë·ªÉ l·∫•y profile t·ª´ API
 *         } else if (!result.success) {
 *           console.error('OAuth error:', result.error);
 *           // Hi·ªÉn th·ªã l·ªói cho user
 *         }
 *       });
 *   }
 * }, [location.search]);
 *
 *
 * 3. Environment Variables (n·∫øu c·∫ßn, nh∆∞ng backend ƒë√£ handle):
 *
 * REACT_APP_API_BASE_URL=https://giasuvlu.click
 */

// ==================================================
// FLOW DIAGRAM
// ==================================================

/**
 * LU·ªíNG ƒêƒÇNG NH·∫¨P MICROSOFT CHO ADMIN (TH·ª∞C T·∫æ):
 *
 * 1. [Frontend] User click "ƒêƒÉng nh·∫≠p Microsoft"
 *    ‚Üì
 * 2. [Frontend] Call API GET /api/admin/auth/get-uri-microsoft
 *    ‚Üì
 * 3. [Backend] Tr·∫£ v·ªÅ OAuth URL: https://login.microsoftonline.com/.../authorize?redirect_uri=https://giasuvlu.click/api/admin/auth/callback
 *    ‚Üì
 * 4. [Frontend] Redirect user ƒë·∫øn OAuth URL
 *    ‚Üì
 * 5. [Microsoft] User ƒëƒÉng nh·∫≠p, consent permissions
 *    ‚Üì
 * 6. [Microsoft] Redirect v·ªÅ BACKEND CALLBACK URL:
 *    GET https://giasuvlu.click/api/admin/auth/callback?code=xxx&state=xxx
 *    ‚Üì
 * 7. [Backend] X·ª≠ l√Ω callback T·ª∞ ƒê·ªòNG:
 *    - Validate state parameter
 *    - Exchange code v·ªõi Microsoft ƒë·ªÉ l·∫•y access token
 *    - Get user info t·ª´ Microsoft Graph API
 *    - T·∫°o JWT token cho app
 *    - Encode admin profile data
 *    ‚Üì
 * 8. [Backend] Redirect v·ªÅ FRONTEND v·ªõi authentication data:
 *    GET https://giasuvlu.click/admin/dashboard?token=xxx&admin=encoded_profile&state=xxx
 *    ‚Üì
 * 9. [Frontend AdminDashboard] Nh·∫≠n URL params v√† x·ª≠ l√Ω:
 *    - Validate state parameter
 *    - L∆∞u token v√†o cookies/localStorage
 *    - Decode v√† l∆∞u admin profile
 *    - setIsAuthenticated(true)
 *    - Clean URL parameters
 *    ‚Üì
 * 10. ‚úÖ Admin ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!
 *
 * ERROR HANDLING:
 * - N·∫øu b·∫•t k·ª≥ b∆∞·ªõc n√†o fail ‚Üí Backend redirect v·ªõi:
 *   https://giasuvlu.click/admin/dashboard?error=error_description&state=xxx
 * - Frontend detect error parameter v√† hi·ªÉn th·ªã th√¥ng b√°o l·ªói
 *
 * IMPORTANT NOTES:
 * - /api/admin/auth/callback: Backend callback URL (Microsoft redirects here, backend x·ª≠ l√Ω t·ª± ƒë·ªông)
 * - /admin/dashboard: Frontend route (Backend redirects here sau khi x·ª≠ l√Ω xong OAuth)
 * - Backend X·ª¨ L√ù T·∫§T C·∫¢ OAuth flow, Frontend ch·ªâ c·∫ßn l·∫•y URL v√† nh·∫≠n k·∫øt qu·∫£
 * - Frontend KH√îNG c·∫ßn g·ªçi th√™m API n√†o kh√°c ƒë·ªÉ ƒëƒÉng nh·∫≠p
 */
