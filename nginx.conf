events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Rate limiting for API calls
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # Cache zones
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=100m inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=50m inactive=5m use_temp_path=off;

    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Root directory
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Handle static assets with long cache
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Pragma public;
            access_log off;
            
            # Enable static file caching
            proxy_cache static_cache;
            proxy_cache_valid 200 1y;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        }

        # Handle main app files with short cache
        location ~* \.(html|json)$ {
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
            access_log off;
        }

        # API rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # API response caching for GET requests
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 2m;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            
            # Add cache status header
            add_header X-Cache-Status $upstream_cache_status;
            
            # Proxy settings (if using API backend)
            # proxy_pass http://your-api-server;
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
        }

        # Login rate limiting
        location /api/login {
            limit_req zone=login burst=5 nodelay;
            # proxy_pass http://your-api-server;
        }

        # SPA fallback - serve index.html for all non-asset requests
        location / {
            try_files $uri $uri/ /index.html;
            
            # Prevent caching of index.html
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }

        # Memory and connection limits
        client_max_body_size 10M;
        client_body_buffer_size 128k;
        client_header_buffer_size 1k;
        large_client_header_buffers 2 1k;

        # Timeout settings
        client_body_timeout 12;
        client_header_timeout 12;
        send_timeout 10;

        # Cache cleanup endpoint for debugging
        location /nginx-status {
            access_log off;
            return 200 "Nginx cache status OK\n";
            add_header Content-Type text/plain;
        }
    }
}